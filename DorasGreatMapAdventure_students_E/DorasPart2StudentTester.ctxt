#BlueJ class context
comment0.target=DorasPart2StudentTester
comment1.params=
comment1.target=void\ testRemove_key_Object01()
comment1.text=\r\n\ \ \ \ \ \ if\ tico\ is\ in\ the\ Set\ associate\ with\ key\r\n\ \ \ \ \ \ \ \ \ \ remove\ tico\ from\ the\ set\ associated\ with\ key.\r\n\ \ \ \ \ \ \ \ \ \ if\ the\ Set\ becomes\ Empty,\ remove\ the\ key\ from\ iAmTheMap\r\n\ \ \ \ \ \ otherwise\ -\ do\ not\ throw\ an\ exception,\ that\ exit\ the\ method\ gracefully\r\n
comment10.params=
comment10.target=void\ testNumMappings01()
comment10.text=\r\n\ \ \ \ \ \ returns\ the\ number\ key-value\ mapping\ in\ iAmTheMap\r\n\ \ \ \ public\ int\ numMappings()\ \r\n\r\n
comment2.params=
comment2.target=void\ testRemoveFromAll01()
comment2.text=\r\n\ \ \ \ \ \ remove\ isa\ from\ all\ sets\r\n
comment3.params=
comment3.target=void\ testMapUnion01()
comment3.text=\r\n\ \ \ \ \ \ This\ allows\ me\ to\ take\ the\ union\ of\ two\ DorasGreatMapAdventure\ implemented\ with\ TreeMaps\ and\ HashMap\r\n\r\n\ \ \ \ \ \ the\ returned\ Map\ will\ contains\ the\ keys\ that\ are\ in\ either\ Map.\r\n\ \ \ \ \ \ For\ keys\ that\ are\ in\ both\ Maps,\ the\ associated\ Sets\ will\ be\ a\ union\ of\ the\ two\ sets\r\n
comment4.params=
comment4.target=void\ testMapIntersection01()
comment4.text=\ \ returns\ a\ DorasGreatMapAdventure\ implemented\ with\ a\ HashMap\r\n\ \ \ \ \ \ This\ allows\ me\ to\ take\ the\ intersection\ of\ DorasGreatMapAdventure\ implemented\ with\ TreeMaps\ and\ HashMap\r\n\r\n\ \ \ \ \ \ the\ returned\ Map\ will\ contains\ the\ keys\ that\ are\ only\ in\ both\ Maps.\r\n\ \ \ \ \ \ the\ associated\ Sets\ will\ be\ an\ intersection\ of\ the\ two\ sets\r\n\ \ \ \ public\ DorasGreatMapAdventure\ setIntersection(DorasGreatMapAdventure\ backpack)\r\n
comment5.params=
comment5.target=void\ testMapDifference01()
comment5.text=\ \ returns\ a\ DorasGreatMapAdventure\ implemented\ with\ a\ HashMap\r\n\ \ \ \ \ \ This\ allows\ me\ to\ take\ the\ difference\ of\ DorasGreatMapAdventure\ implemented\ with\ TreeMaps\ and\ HashMap\r\n\r\n\ \ \ \ \ \ the\ returned\ Map\ will\ contains\ the\ keys\ that\ are\ in\ this.iAmTheMap.\r\n\ \ \ \ \ \ for\ each\ key\ in\ this.iAmTheMap,\ if\ that\ key\ is\ in\ swiper,\r\n\ \ \ \ \ \ the\ associated\ set\ is\ the\ set\ difference\ of\ this.iAmTheMap\ -\ swiper.iAmTheMap\r\n\ \ \ \ public\ DorasGreatMapAdventure\ mapDifference(DorasGreatMapAdventure\ swiper)\r\n
comment6.params=
comment6.target=void\ testIsSubmapOf01()
comment6.text=\r\n\ \ \ \ \ \ returns\ true\ iff\r\n\ \ \ \ \ \ \ \ \ for\ each\ key\ in\ this.iAmTheMap,\ backpack.iAmTheMap\ contains\ the\ same\ key\r\n\ \ \ \ \ \ \ \ \ this.iAmTheMap.get(key)\ is\ a\ subset\ of\ backpack.iAmTheMap.get(k)\r\n\ \ \ \ \ \ note\:\ \ this\ allows\ both\ Maps\ to\ be\ equal\r\n\ \ \ \ \ \ otherwise\ return\ false\r\n\ \ \ \ public\ boolean\ isSubmapOf(DorasGreatMapAdventure\ backpack)\ {\r\n
comment7.params=
comment7.target=void\ testIsProperSubmapOf01()
comment7.text=\r\n\ \ \ \ \ \ returns\ true\ iff\r\n\ \ \ \ \ \ \ \ \ for\ each\ key\ in\ this.iAmTheMap,\ backpack.iAmTheMap\ contains\ the\ same\ key\r\n\ \ \ \ \ \ \ \ \ this.iAmTheMap.get(key)\ is\ a\ subset\ of\ backpack.iAmTheMap.get(key)\ for\ every\ key\ in\ iAmTheMap.keySet()\ with\ either\:\r\n\ \ \ \ \ \ \ \ \ \ \ \ 1)\ this.iAmTheMap.get(key)\ is\ a\ proper\ subset\ of\ backpack.iAmTheMap.get(key)\ for\ atleast\ one\ key\ in\ iAmTheMap.keySet()\r\n\ \ \ \ \ \ \ \ \ or\ 2)\ backpack.iAmTheMap\ contains\ at\ least\ one\ key\ that\ this.iAmTheMap\ does\ not\r\n\ \ \ \ \ \ note\:\ \ this\ implies\ that\ equal\ sets\ are\ NOT\ properSubsets.\r\n\ \ \ \ \ \ otherwise\ return\ false\r\n
comment8.params=
comment8.target=void\ testClear01()
comment8.text=\r\n\ \ \ \ \ \ Removes\ all\ mappings\ from\ this\ map\r\n\ \ public\ void\ clear()\ \r\n
comment9.params=
comment9.target=void\ testClearKey01()
comment9.text=\r\n\ \ \ \ \ \ the\ set\ associated\ with\ key\ is\ emptied\r\n\ \ public\ void\ clearKey(Object\ isa)\r\n
numComments=11
