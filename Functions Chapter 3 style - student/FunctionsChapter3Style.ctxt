#BlueJ class context
comment0.target=FunctionsChapter3Style
comment0.text=\r\n\r\n\ @author\ \ \r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=d\ co
comment1.target=FunctionsChapter3Style(java.util.Set,\ java.util.Set)
comment10.params=
comment10.target=boolean\ isBijective()
comment10.text=\r\n\ \ \ \ \ returns\ true\ if\ the\ array\ of\ order\ Pairs\ is\ a\ function\ and\ the\ function\ is\ bijective\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ that\ is\ both\ one\ to\ one\ and\ onto\r\n\ \ \ \ \ returns\ false\ otherwise\r\n
comment11.params=op\ opCoDomain
comment11.target=FunctionsChapter3Style\ getComposition(java.util.Set,\ java.util.Set)
comment11.text=\r\n\ \ \ precondition\:\ \ getRelation()\ and\ op\ (the\ parameter)\ are\ both\ functions.\ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Domain\ of\ op\ is\ a\ subset\ of\ coDomain\ of\ getRelation()\r\n\ \ \ \r\n\ \ \ returns\ a\ new\ FunctionsChapter3Style\ Object.\r\n\ \ \ The\ domain\ of\ new\ FunctionsChapter3Style\ Object\ is\ this.domain\r\n\ \ \ The\ coDomain\ is\ opCoDomain\ (the\ paramenter)\r\n\ \ \ \r\n\ \ \ The\ new\ function\ is\ the\ composition\ op(\ this.getRelation\ (this.domain)\ )\r\n
comment12.params=
comment12.target=OrderedPair[]\ getInverse()
comment12.text=\r\n\ \ \ precondition\:\ \ rel\ is\ a\ function.\r\n\ \ \ rel\ does\ not\ have\ to\ be\ both\ 1-1\ and\ onto\r\n\ \ \ the\ inverse\ does\ not\ need\ to\ be\ a\ function\r\n
comment13.params=
comment13.target=boolean\ isReflexive()
comment13.text=\r\n\ A\ relation\ is\ reflexive\ if\ (x,\ x)\ in\ R\ for\ every\ x\ in\ X.\ X\ is\ the\ domain\r\n\ \r\n\ \ \ \ \ \ \ returns\ true\ if\ the\ current\ relation\ is\ reflexive\r\n\ \ \ \ \ \ \ returns\ false\ otherwise\r\n
comment14.params=
comment14.target=boolean\ isSymmetric()
comment14.text=\r\n\ \ \ \ \ \ \ A\ relation\ is\ symmetric\ if\r\n\ \ \ \ \ \ \ for\ all\ x,\ y\ in\ X,\ if\ (x,y)\ in\ R,\ then\ (y,x)\ in\ R\r\n\ \r\n\ \ \ \ \ \ \ returns\ true\ if\ the\ current\ relation\ is\ symmetric\r\n\ \ \ \ \ \ \ returns\ false\ otherwise\r\n
comment15.params=
comment15.target=boolean\ isAntiSymmetric()
comment15.text=\r\n\ \ \ \ \ \ \ A\ relation\ is\ Antisymmetric\ if\r\n\ \ \ \ \ \ \ for\ all\ x,\ y\ in\ X,\ if\ (x,y)\ in\ R,\ and\ (y,x)\ in\ R,\ then\ x\ \=\ y\r\n\ \r\n\ \ \ \ returns\ true\ if\ the\ current\ relation\ is\ Antisymmetric\r\n\ \ \ \ returns\ false\ otherwise\r\n
comment16.params=
comment16.target=boolean\ isTransitive()
comment16.text=\r\n\ \ \ \ \ \ \ A\ relation\ is\ transitive\:\r\n\ \ \ \ \ \ \ if\ (a,b)\ and\ (b,c)\ then\ (a,c)\r\n\ \r\n\ \ \ \ \ \ \ returns\ true\ if\ the\ current\ relation\ is\ transitive\r\n\ \ \ \ \ \ \ returns\ false\ otherwise\r\n
comment17.params=
comment17.target=boolean\ isEquivalenceRelation()
comment17.text=\r\n\ \ \ \ returns\ true\ is\ the\ relation\ is\ an\ Equivalence\ Relation\r\n\ \ \ \ returns\ false\ otherwise\r\n
comment18.params=
comment18.target=boolean\ isPartiallyOrder()
comment18.text=\r\n\ \ \ \ \r\n\ \ \ \ returns\ true\ is\ the\ relation\ is\ an\ Partially\ Order\r\n\ \ \ \ returns\ false\ otherwise\r\n
comment19.params=s
comment19.target=FunctionsChapter3Style\ getConstant(java.lang.String)
comment19.text=\r\n\ \ \ \ \ \ return\ a\ Function\ with\ the\ same\ domain\ as\ getRelation,\r\n\ \ \ \ \ \ \ with\ getY().equals(s)\r\n
comment2.params=d\ co\ r
comment2.target=FunctionsChapter3Style(java.util.Set,\ java.util.Set,\ java.util.Set)
comment20.params=s
comment20.target=java.util.ArrayList\ getRel(java.lang.String)
comment20.text=\r\n\ \ \ \ \ \ not\ tested.\r\n\ \ \ \ \ \ Not\ sure\ why\ it\ is\ here.\ \ I\ think\ I\ needed/used\ this\ functionality\ more\ than\ once,\r\n\ \ \ \ \ \ and\ therefore\ created\ a\ helper\ method\r\n
comment3.params=
comment3.target=java.lang.String\ getRelString()
comment3.text=\r\n\ \ \ \ Not\ tested.\r\n\ \ \ \ \r\n\ \ \ \ I\ admit\ that\ I\ did\ use\ this\ method\ a\ couple\ of\ times.\r\n\ \ \ \ It\ came\ in\ very\ handy\ and\ SHORTEN\ my\ code\ and\ GREATLY\ simplified\ some\ methods\r\n\ \ \ \ I\ will\ let\ you\ figure\ out\ which\ ones\ and\ how\r\n\ \ \ \ \r\n\ \ \ \ returns\ a\ String\ of\ the\ form\:\ [(a,b),\ (c,d),\ ...(v,w)]\r\n
comment4.params=op
comment4.target=void\ setRelation(java.util.Set)
comment4.text=\r\n\ \ \ \ replaces\ the\ current\ relation\ instance\ variable\ with\ op\r\n\ \ \ \ \r\n\ \ \ \ YES\ -\ this\ method\ gets\ used\ in\ the\ my\ (stipulator)\ tester\r\n
comment5.params=
comment5.target=java.util.Set\ getRelation()
comment5.text=\r\n\ \ \ \ returns\ the\ current\ relation\ instance\ variable\ \r\n
comment6.params=
comment6.target=int\ size()
comment6.text=\r\n\ \ \ \ retruns\ the\ number\ of\ Order\ Pairs\ in\ the\ relation\r\n
comment7.params=
comment7.target=boolean\ isFunction()
comment7.text=\r\n\ \ \ \ returns\ true\ if\ the\ array\ of\ Order\ Pairs\ forms\ a\ function\r\n\ \ \ \ returns\ false\ otherwise\r\n
comment8.params=
comment8.target=boolean\ is1To1()
comment8.text=\ \r\n\ \ \ \ A\ function\ f\ from\ X\ to\ Y\ is\ said\ to\ be\ one\ to\ one\ if\ \r\n\ \ \ \ for\ each\ y\ in\ Y,\ there\ is\ at\ most\ one\ x\ in\ X\ with\ f(x)\ \=\ y\r\n\r\n\ \ \ \ returns\ true\ if\ array\ of\ order\ Pairs\ is\ a\ function\ and\ the\ function\ is\ one\ to\ one\r\n\ \ \ \ returns\ false\ otherwise\r\n
comment9.params=
comment9.target=boolean\ isOnTo()
comment9.text=\r\n\ \ \ \ A\ function\ from\ X\ to\ Y\ is\ said\ to\ be\ onto\ if\r\n\ \ \ \ the\ range\ of\ f\ \=\=\ Y\r\n\r\n\ \ \ \ returns\ true\ if\ array\ of\ order\ Pairs\ is\ a\ function\ and\ the\ function\ is\ onto\r\n\ \ \ \ returns\ false\ otherwise\r\n
numComments=21
