#BlueJ class context
comment0.target=Java8StreamMapCollect
comment0.text=\r\n\ @author\ \ Don\ Allen\r\n
comment1.params=nums
comment1.target=java.util.List\ noNeg(java.util.List)
comment1.text=\r\n\ \ \ Remember,\ the\ objective\ of\ this\ lab\ is\ to\ use\ the\ features\ provided\ in\ Java\ 8\r\n\ \ \ \ \ \r\n\ \ \ \ remove\ all\ negative\ numbers\ (<\ 0)\ from\ the\ parameter\ nums\r\n
comment2.params=words\ minLength
comment2.target=java.util.List\ shortenString(java.util.List,\ int)
comment2.text=\r\n\ \ \ Remember,\ the\ objective\ of\ this\ lab\ is\ to\ use\ the\ features\ provided\ in\ Java\ 8\r\n\ \ \ \ \ \r\n\ \ \ Given\ a\ list\ of\ Strings\r\n\ \ \ return\ a\ new\ (and\ different)\ list\ with\ the\ first\ and\ last\ letter\ removed\r\n\ \ \ \ \ \ \ \ \ \ omitting\ all\ new\ Strings\ with\ a\ length\ shorter\ than\ (not\ equal)\ the\ parameter\ minLength\r\n\ \ \ \r\n\ \ \ postcondition\:\ \ words\ remains\ unchanged\r\n\ \ \ \r\n\ \ \ \ \ \ \ \ shortenString(["one",\ "five",\ "seven",\ "twenty-one"],\ 4)\ returns\ ["wenty-on"]\r\n
comment3.params=words\ minLength
comment3.target=java.util.List\ shortenStringAgain(java.util.List,\ int)
comment3.text=\r\n\ \ \ Remember,\ the\ objective\ of\ this\ lab\ is\ to\ use\ the\ features\ provided\ in\ Java\ 8\r\n\ \ \ \ \ \r\n\ \ \ Given\ a\ list\ of\ Strings\r\n\ \ \ omitting\ all\ new\ Strings\ with\ a\ length\ shorter\ than\ OR\ equal\ to\ the\ parameter\ minLength\r\n\ \ \ then\ return\ a\ new\ (and\ different)\ list\ with\ the\ first\ and\ last\ letter\ removed\r\n\ \ \ \r\n\ \ \ postcondition\:\ \ words\ remains\ unchanged\r\n\ \ \ \r\n\ \ \ \ \ \ \ \ shortenStringAgain(["one",\ "five",\ "seven",\ "twenty-one"],\ 4)\ returns\ ["eve",\ "wenty-on"]\r\n
comment4.params=nums\ scalar
comment4.target=java.util.List\ multiplyByScalar(java.util.List,\ int)
comment4.text=\r\n\ \ \ Remember,\ the\ objective\ of\ this\ lab\ is\ to\ use\ the\ features\ provided\ in\ Java\ 8\r\n\ \ \ \ \ \r\n\ \ \ Given\ a\ list\ of\ non\ negative\ Integers\r\n\ \ \ return\ a\ new\ (and\ different)\ list\ with\ the\ values\ in\ nums\ times\ the\ parameter\ scalar\r\n\ \ \ \ \ \ \ \ \ \ omitting\ all\ products\ that\ end\ in\ 5\r\n\ \ \ \r\n\ \ \ \ \ \ \ \ \ multiplyByScalar([7,\ 11,\ 2,\ 5],\ 7)\ returns\ ["49",\ "77",\ "14"]\r\n\ \ \ postcondition\:\ \ nums\ remains\ unchanged\r\n
comment5.params=nums
comment5.target=java.util.List\ convertToString(java.util.List)
comment5.text=\r\n\ \ \ Remember,\ the\ objective\ of\ this\ lab\ is\ to\ use\ the\ features\ provided\ in\ Java\ 8\r\n\ \ \ \ \ \r\n\ \ \ Given\ a\ List\ of\ Integers\r\n\ \ \ return\ a\ list\ of\ all\ positive\ values\ (>\ 0)\ in\ nums\ as\ a\ string\r\n\ \ \ \ \ \ \ \ \ \ yes,\ omit\ any\ values\ in\ the\ List\ that\ are\ NOT\ positive,\ that\ is\ greater\ than\ zero\r\n\ \ \ \r\n\ \ \ \ \ \ \ \ \ convertToString([7,\ 11,\ -2,\ 5])\ returns\ ["7",\ "11",\ "5"]\r\n\ \ \ postcondition\:\ \ nums\ remains\ unchanged\r\n
comment6.params=words\ evil
comment6.target=java.util.List\ listOfLengths(java.util.List,\ int)
comment6.text=\r\n\ \ \ Remember,\ the\ objective\ of\ this\ lab\ is\ to\ use\ the\ features\ provided\ in\ Java\ 8\r\n\ \ \ \ \ \r\n\ \ \ return\ a\ Integer\ List\ of\ the\ length\ of\ each\ String\ in\ words\ \r\n\ \ \r\n\ \ \ omitting\ all\ number\ contain\ the\ digit\ evil\r\n\ \ \ \r\n\ \ \ \ \ \ \ \ \ listOfLengths(["123456",\ "123",\ "123456789"],\ 7)\ returns\ [6,\ 3]\r\n\ \ \ postcondition\:\ \ nums\ remains\ unchanged\r\n
comment7.params=p
comment7.target=java.util.List\ robotMaker(java.util.List)
comment7.text=\r\n\ \ \ Remember,\ the\ objective\ of\ this\ lab\ is\ to\ use\ the\ features\ provided\ in\ Java\ 8\r\n\ \ \ \ \ \r\n\ \ \ returns\ a\ List\ of\ Robots\ using\ the\ parameter\ p\ to\ determine\ the\ street\ and\ avenue\r\n\ \ \ \ \ \ \ the\ Robot\ at\ index\ n\ is\ constructed\ at\:\r\n\ \ \ \ \ \ \ \ \ \ \ \ Street\ p.get(n).getX()\r\n\ \ \ \ \ \ \ \ \ \ \ \ Avenue\ p.get(n).getY()\r\n\ \ \ \ \ \ \ \ \ \ \ \ Facing\ North\r\n\ \ \ \ \ \ \ \ \ \ \ \ with\ 10\ beepers\r\n\ \ \ \ \ \ \ \ omit\ all\ Robots\ with\ a\ Street\ <\=\ 0\ or\ Avenue\ <\=\ 0\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ listOfLengths([new\ IntPoint(1,\ 1),\ new\ IntPoint(1,\ 0),\ new\ IntPoint(10,\ 2)])\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ returns\ [new\ Robot(1,\ 1,\ North,\ 10).\ new\ Robot(10,\ 2,\ North,\ 10)]\r\n\ \ \ \ \ \ \ \ \ \r\n\ \ \ postcondition\:\ \ p\ remains\ unchanged\r\n
comment8.params=items\ skipThese
comment8.target=java.lang.Object[]\ getAsArray(java.util.List,\ int)
comment8.text=\r\n\ \ \ Remember,\ the\ objective\ of\ this\ lab\ is\ to\ use\ the\ features\ provided\ in\ Java\ 8\r\n\ \ \ \ \ \r\n\ \ \ \ \ Returns\ an\ Object[]\ of\ all\ elements\ in\ the\ parameter\ List<Object>\ items,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ omitting\ the\ first\ skipThese\ elements\ (skipThese\ is\ a\ parameter)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ you\ may\ assume\ items.size()\ >\ skipThese\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ getAsArray{\ [1,\ 2,\ 3,\ 4,\ 5,\ 6,\ 7,\ 8,\ 9],\ 7)\ return\ [8,\ 9]\ \ \ \ \ \ \ \ \ \ \r\n
comment9.params=items\ obj\ skipThese
comment9.target=java.lang.Object[]\ getTheseObjects(java.util.List,\ java.lang.Object,\ int)
comment9.text=\r\n\ \ \ Remember,\ the\ objective\ of\ this\ lab\ is\ to\ use\ the\ features\ provided\ in\ Java\ 8\r\n\ \ \ \ \ \r\n\ \ \ \ \ Returns\ an\ array\ of\ all\ elements\ in\ the\ parameter\ List<Object>\ items,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ omitting\ the\ first\ skipThese\ elements\ (skipThese\ is\ a\ parameter)\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ including\ only\ items\ that\ are\ an\ instanceof\ the\ Class\ indicated\ by\ the\ parameter\ obj\r\n\r\n\ \ \ Review\ the\ last\ paragraph\ of\ the\ word\ file\ describing\ the\ isAssignableFrom\ method\r\n\ \ \r\nGiven\:\ \ \ \ SuperBot\ extends\ BetterTurned\ extends\ Robot\r\n\ \ \ \ \ \ \ \ List<BetterTurner>\ rBot,\r\n\ \ \ \ \ \ \ \ Robot\ r;\r\n\ \ \ \ \ \ \ \ BetterTurned\ b;\r\n\ \ \ \ \ \ \ \ SuperBot\ s;\r\n\r\n\ \ \ \ \ \ \ \ rBot.get(0).getClass().isAssignableFrom(\ \ r.getClass()\ )\ returns\ false\r\n\ \ \ \ \ \ \ \ rBot.get(0).getClass().isAssignableFrom(\ \ b.getClass()\ )\ returns\ true\r\n\ \ \ \ \ \ \ \ rBot.get(0).getClass().isAssignableFrom(\ \ s.getClass()\ )\ returns\ true\r\n\r\nThe\ following\ is\ sample\ code\ for\ the\ getTheseObjects(...)\ method\r\n\r\n\ \ \ \ \ \ \ \ List<Object>\ oList\ \=\ new\ ArrayList<Object>();\r\n\ \ \ \ \ \ \ \ oList.add(new\ IntPoint(1,\ 1));\r\n\ \ \ \ \ \ \ \ oList.add(new\ PointSum(1,\ 0));\r\n\ \ \ \ \ \ \ \ oList.add(new\ PointProd(10,\ 2));\r\n\ \ \ \ \ \ \ \ oList.add(new\ PointSum(1,\ 1));\r\n\ \ \ \ \ \ \ \ oList.add(new\ PointProd(10,\ 12));\r\n\ \ \ \ \ \ \ \ oList.add(new\ IntPoint(21,\ 112));\r\n\ \ \ \ \ \ \ \ oList.add(new\ PointSum(17,\ 90));\r\n\r\n\ \ \ \ \ \ \ \ Object[]\ oResult\ \=\ Java8StreamMapCollect.getTheseObjects(oList,\ new\ PointSum(9,\ 99),\ 5);\r\n\ \ \ \ \ \ \ \ assertEquals(1,\ oResult.length);\r\n\ \ \ \ \ \ \ \ assertEquals(new\ IntPoint(17,\ 90),\ oResult[0]);\r\n
numComments=10
