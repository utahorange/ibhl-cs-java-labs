#BlueJ class context
comment0.target=StudentTester
comment0.text=\n\ The\ test\ class\ StudentTester.\n\n\ @author\ \ Mr.\ Allen\n\ @version\ (a\ version\ number\ or\ a\ date)\n
comment1.params=
comment1.target=void\ testHasPath03()
comment10.params=
comment10.target=void\ testIsEvenGraph01()
comment11.params=
comment11.target=void\ testUnion01()
comment12.params=
comment12.target=void\ testIntersection01()
comment13.params=
comment13.target=void\ testIsBipartite01()
comment14.params=
comment14.target=void\ testHasPath01()
comment14.text=\n\ \ \ \ is\ there\ a\ path\ from\ v\ to\ w\ of\ any\ length\ <\=\ myVertices.size()\n\ \ \ \ \n\ \ \ \ page\ 388\:\ \ Example\ 8.2.2/\ Figure\ 8.2.1\ -\ assume\ all\ edges\ are\ bidirectional\n
comment15.params=
comment15.target=void\ testIsConnectedGraph01()
comment15.text=\n\ \ \ \ page\ 388\ -\ 389\n\ \ \ \ \ \ \ A\ graph\ is\ connected\ if\ given\ any\ vertices\ v\ and\ w\ in\ G,\ there\ is\ a\ path\ from\ v\ to\ w\n\ \ \ \ \n\ \ \ \ Example\ 8.2.5\ /\ Figure\ 8.2.1\ -\ In\ this\ example\ assume\ all\ edges\ are\ bidirectional\n
comment16.params=
comment16.target=void\ testIsSimplePath01()
comment16.text=\ \ \ \ isSimplePath(List<String>\ p)\n\ \ \ \ page\ 391\n\ \ \ \ \ \ \ A\ simple\ path\ from\ v\ to\ w\ is\ a\ path\ from\ v\ to\ w\ with\ no\ repeated\ vertices\n\ \ \ \ \ \ \ \n\ \ \ \ Example\ 8.2.15\ /\ Figure\ 8.2.1\ -\ assume\ all\ edges\ are\ bidirectional\n
comment17.params=
comment17.target=void\ testIsCycle01()
comment17.text=\ \ \ \ isCycle(List<String>\ c)\n\ \ \ \ page\ 391\n\ \ \ \ \ \ \ A\ cycle\ is\ a\ path\ of\ nonzero\ length\ from\ v\ to\ v\ with\ no\ repeated\ edges\n\ \n\ \ \ \ Example\ 8.2.15\ /\ Figure\ 8.2.1\ -\ assume\ all\ edges\ are\ bidirectional\n
comment18.params=
comment18.target=void\ testIsSimpleCycle01()
comment18.text=\ \ \ \ isSimpleCycle(List<String>\ sc)\n\ \ \ \ page\ 391\n\ \ \ \ \ \ \ A\ simple\ cycle\ is\ a\ cycle\ from\ v\ to\ v\ in\ which,\ except\ for\ the\ beginning\ and\ ending\ vertices\ that\ are\ both\ equal\ to\ v,\n\ \ \ \ \ \ \ \ \ \ there\ are\ no\ repeated\ edges\n\ \ \ \ \n\ \ \ \ Example\ 8.2.15\ /\ Figure\ 8.2.1\ -\ assume\ all\ edges\ are\ bidirectional\n
comment19.params=
comment19.target=void\ testGetSimpleCycle01()
comment19.text=\ \ \ \ getSimpleCycle(String\ v)\n\ \ \ \ page\ 391\n\ \ \ \ \ \ \ A\ cycle\ is\ a\ path\ of\ nonzero\ length\ from\ v\ to\ v\ with\ no\ repeated\ edges\n\ \ \ \ \ \ \ \n\ \ \ \ page\ 391\ \:\ \ Example\ 8.2.15\ /\ Figure\ 8.2.1\n
comment2.params=
comment2.target=void\ testEdgeEquals01()
comment3.params=
comment3.target=void\ testDriectedGraphEquals01()
comment4.params=
comment4.target=void\ testIsAdjacent01()
comment4.text=\n\ \ \ \ \ Example\ from\:\ http\://webwhompers.com/graph-theory.html\n\ \ \ \ \ \ \ \ \ \ \ Section\ Neighborhood\ and\ Degree\ \n
comment5.params=
comment5.target=void\ testGetNeighbors01()
comment5.text=\n\ \ \ \ \ Example\ from\:\ http\://webwhompers.com/graph-theory.html\n\ \ \ \ \ \ \ \ \ \ \ Section\ Neighborhood\ and\ Degree\ \n
comment6.params=
comment6.target=void\ testHasLoop01()
comment7.params=
comment7.target=void\ testParallelEdges01()
comment8.params=
comment8.target=void\ testGetAllIsolatedEdges01()
comment9.params=
comment9.target=void\ testGetVertexDegree01()
numComments=20
